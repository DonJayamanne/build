jobs:
  - job: Windows
    pool:
      name: Hosted VS2017
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run compile'
      - script: 'node node_modules/vscode/bin/test'
        displayName: 'Run tests'
  - job: macOS
    pool:
      name: Hosted macOS
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run compile'
      - script: 'npm run test'
        displayName: 'Run tests'
  - job: Linux
    pool:
      name: Hosted Ubuntu 1604
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - task: Npm@1
        displayName: 'Compile sources'
        inputs:
          command: custom
          verbose: false
          customCommand: 'run compile'
      - script: |
          set -e
          /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
          disown -ar
        displayName: 'Start xvfb'
      - script: 'node node_modules/vscode/bin/test'
        displayName: 'Run tests'
        env:
          DISPLAY: :10
      # - task: Npm@1
      #   displayName: 'Tests with coverage'
      #   inputs:
      #     command: custom
      #     verbose: false
      #     customCommand: 'run test_coverage'
      # - task: PublishTestResults@2
      #   condition: succeededOrFailed()
      #   inputs:
      #     testRunner: JUnit
      #     testResultsFiles: '**/test-results.xml'
      # - task: PublishCodeCoverageResults@1
      #   inputs:
      #     codeCoverageTool: Cobertura
      #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
      #     reportDirectory: '$(System.DefaultWorkingDirectory)/coverage/*coverage.xml'
  - job: Build
    dependsOn:
      - Windows
      - macOS
      - Linux
    pool:
      name: Hosted macOS
      demands: npm
    steps:
      - task: NodeTool@0
        displayName: 'Use Node 10.x'
        inputs:
          versionSpec: 10.x
      - task: Npm@1
        displayName: 'Install dependencies'
        inputs:
          verbose: false
      - script: |
          npm install -g vsce
        displayName: 'Install VSCE'
        condition: succeeded()
      - script: |
          vsce package --out extension.vsix
        displayName: 'Build VSIX'
        condition: succeeded()
      - task: CopyFiles@2
        inputs:
          contents: "*.vsix"
          targetFolder: $(Build.ArtifactStagingDirectory)
        displayName: "Copy VSIX"
        condition: succeeded()
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: VSIX
        displayName: "Publish VSIX to Arifacts"
        condition: succeeded()
